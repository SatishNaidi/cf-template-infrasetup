{
  "Description": "To Create VPCs, along with 2 Private and 2 Public Subnets",
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Project and Tag" },
          "Parameters" : [ "aProjectName"]
        },
        {
          "Label" : { "default" : "VPC Configuration" },
          "Parameters" : [ 
            "VpcCIDR", "AZs", "PublicSubnet1CIDR","PublicSubnet2CIDR",
            "PrivateSubnet1CIDR","PrivateSubnet2CIDR" ,"RetentionInDays", "VPCTrafficType"
          ]
        },
        {
          "Label" : { "default":"Buckets Configuation" },
          "Parameters" : [ "MoveToGlacierAfrDays", "DeleteFromGlacierAfrDays"]
        },
        {
          "Label" : { "default":"IAM Configuration" },
          "Parameters" : [ "Password"]
        },
        {
          "Label" : { "default":"EC2 Configuration" },
          "Parameters" : [ "SSHKeyName"]
        },
        {
          "Label" : { "default":"CloudTrail Configuration" },
          "Parameters" : [ "OperatorEmail"]
        },
        {
          "Label" : { "default":"Lambda Configuration" },
          "Parameters" : [ "BucketForLambdaCode","CleanupSnapShotCode","CreateSnapShotCode" ]
        },
        {
          "Label" : { "default":"PostGreSQL Configuration" },
          "Parameters" : [ "DBName", "DBUsername","DBPassword","DBClass","DBAllocatedStorage"]
        }
      ]
    }
  },
  "Parameters": {
    "aProjectName": {
      "Description": "Project Name, STaaS",
      "Type": "String",
      "Default": "STaaS"
    },
    "VpcCIDR": {
      "Description": "CIDR for the VPC",
      "Type": "String",
      "Default": "10.192.0.0/16"
    },
    "AZs": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Default": "us-east-1a,us-east-1b",
      "Description": "Select Two AZs, where the Public and Private Subnets will be deployed."
    },
    "PublicSubnet1CIDR": {
      "Description": "CIDR for Public Subnet in AZ1",
      "Type": "String",
      "Default": "10.192.10.0/24"
    },
    "PublicSubnet2CIDR": {
      "Description": "CIDR for Public Subnet in AZ2",
      "Type": "String",
      "Default": "10.192.11.0/24"
    },
    "PrivateSubnet1CIDR": {
      "Description": "CIDR for private Subnet in AZ1",
      "Type": "String",
      "Default": "10.192.20.0/24"
    },
    "PrivateSubnet2CIDR": {
      "Description": "CIDR for private Subnet in AZ2",
      "Type": "String",
      "Default": "10.192.21.0/24"
    },
    "RetentionInDays": {
      "Description": "Specifies the number of days you want to retain Flow log events?",
      "Type": "Number",
      "Default": 14,
      "AllowedValues": [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1827,3653]
    },
    "VPCTrafficType": {
      "Description": "The type of VPC traffic to log.",
      "Type": "String",
      "Default": "REJECT",
      "AllowedValues": [
          "ACCEPT",
          "REJECT",
          "ALL"
        ]
      },
    "SSHKeyName": {
      "Default": "Mumbai",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "MoveToGlacierAfrDays": {
      "Default": "30",
      "Description": "Enter the number of day to move the file to glacier",
      "Type": "Number"
    },
    "DeleteFromGlacierAfrDays": {
      "Default": "90",
      "Description": "Enter the number of days to Delete the files from glacier",
      "Type": "Number"
    },
    "OperatorEmail": {
      "Description": "Email address to notify when new logs are published.",
      "Default":"youremail@domain.com",
      "Type": "String"
    },
    "BucketForLambdaCode": {
      "Description": "Select the bucket name where the lamdba fucntion code resides",
      "Default":"aws-saketh-lambda",
      "Type": "String"
    },
    "CleanupSnapShotCode": {
      "Description": "Select the Key name in the bucket to consume the code, Code Should be uploaded to Bucker Prior",
      "Default":"lambda-cleanup-snapshot.zip",
      "Type": "String"
    },
    "CreateSnapShotCode": {
      "Description": "Select the Key name in the bucket to consume the code, Code Should be uploaded to Bucker Prior",
      "Type": "String",
      "Default":"lambda-create-snapshot.zip"
    },
    "Password": {
      "NoEcho": "true",
      "Default": "HelloWorld123@9Id",
      "Type": "String",
      "Description": "New account password",
      "MinLength": "1",
      "MaxLength": "41",
      "ConstraintDescription": "Please refer to IAM Password Policy in your account"
    },
    "DBName": {
      "Default": "pgdb",
      "Description" : "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "8",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Default": "root",
      "NoEcho": "true",
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Default": "root1234",
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8"
    },

    "DBClass" : {
      "Default" : "db.t2.micro",
      "Description" : "Database instance class",
      "Type" : "String",
      "AllowedValues" : [ "db.t2.micro", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "6144",
      "ConstraintDescription" : "must be between 5+"
    }
  },
  "Resources": {
    "cloudtrail": {
      "Type": "AWS::S3::Bucket",
      "Metadata" : { "Object1" : "Location1",  "Object2" : "Location2" },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "GlacierRule",
              "Status": "Enabled",
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 1
                }
              ],
              "ExpirationInDays": "700",
              "Transitions": [
                {
                  "TransitionInDays": {
                    "Ref": "MoveToGlacierAfrDays"
                  },
                  "StorageClass": "Glacier"
                }
              ]
            }
          ]
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "cloudtrail"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "cloudtrail"}]]}
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "cloudtrail"},"/AWSLogs/",{"Ref": "AWS::AccountId"},"/*"]]},
              "Condition": {
                "StringEquals": {"s3:x-amz-acl": "bucket-owner-full-control"}
              }
            }
          ]
        }
      }
    },
    "Topic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "OperatorEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "TopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {
            "Ref": "Topic"
          }
        ],
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailSNSPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Resource": "*",
              "Action": "SNS:Publish"
            }
          ]
        }
      }
    },
    "myTrail": {
      "DependsOn": [
        "BucketPolicy",
        "TopicPolicy"
      ],
      "Type": "AWS::CloudTrail::Trail",
      "Properties": {
        "S3BucketName": {
          "Ref": "cloudtrail"
        },
        "SnsTopicName": {
          "Fn::GetAtt": ["Topic","TopicName"]
        },
        "IsLogging": true
      }
    },
    "MyVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCIDR"
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "aProjectName"}
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "aProjectName"}
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {"Ref": "MyVPC"}
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "MyVPC"},
        "AvailabilityZone": {"Fn::Select": [ "0",{"Ref": "AZs"}]},
        "CidrBlock": {"Ref": "PublicSubnet1CIDR"},
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "${aProjectName} Public Subnet (AZ1)"}
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "AvailabilityZone": {"Fn::Select": ["1",{"Ref": "AZs"}]},
        "CidrBlock": {"Ref": "PublicSubnet2CIDR"},
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "${aProjectName} Public Subnet (AZ2)"}
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": ["0",
            {
              "Ref": "AZs"
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CIDR"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${aProjectName} Private Subnet (AZ1)"
            }
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": ["1",{"Ref": "AZs"}]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CIDR"
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "${aProjectName} Private Subnet (AZ2)"}
          }
        ]
      }
    },
    "NatGateway1EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "MyVPC"
      }
    },
    "NatGateway2EIP": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "Domain": "MyVPC"
      }
    },
    "NatGateway1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGateway1EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "NatGateway2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGateway2EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${aProjectName} Public Routes"
            }
          }
        ]
      }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${aProjectName} Private Routes (AZ1)"
            }
          }
        ]
      }
    },
    "DefaultPrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway1"
        }
      }
    },
    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }
    },
    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${aProjectName} Private Routes (AZ2)"
            }
          }
        ]
      }
    },
    "DefaultPrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway2"
        }
      }
    },
    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP and SSH traffic Host attached",
        "VpcId": {"Ref": "MyVPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "FlowLogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "vpc-flow-logs.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
            {
              "PolicyName": "flowlogs-policy",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
    "FlowLogGroup": {
        "Type": "AWS::Logs::LogGroup",
        "Properties": {
            "RetentionInDays": {"Ref": "RetentionInDays"}
        }
    },
    "MyFlowLog" : {
        "Type" : "AWS::EC2::FlowLog",
        "Properties" : {
          "DeliverLogsPermissionArn" : { "Fn::GetAtt" : ["FlowLogRole", "Arn"] },
          "LogGroupName" : "FlowLogGroup",
          "ResourceId" : { "Ref" : "MyVPC" },
          "ResourceType" : "VPC",
          "TrafficType" : {"Ref": "VPCTrafficType"}
        }
      },
    "DataBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "GlacierRule",
              "Status": "Enabled",
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 1
                }
              ],
              "ExpirationInDays": {"Ref": "DeleteFromGlacierAfrDays"},
              "Transitions": [
                {
                  "TransitionInDays": {"Ref": "MoveToGlacierAfrDays"},
                  "StorageClass": "Glacier"
                }
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Project",
            "Value": {"Fn::Sub": "${aProjectName}"}
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {"Ref": "LoggingBucket"},
          "LogFilePrefix": "access-logs"
        }
      }
    },
    "LoggingBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "GlacierRule",
              "Status": "Enabled",
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 1
                }
              ],
              "ExpirationInDays": {"Ref": "DeleteFromGlacierAfrDays"},
              "Transitions": [
                {
                  "TransitionInDays": {"Ref": "MoveToGlacierAfrDays"},
                  "StorageClass": "Glacier"
                }
              ]
            }
          ]
        },
        "AccessControl": "LogDeliveryWrite"
      }
    },

    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[
            {
            "Effect":"Allow",
            "Principal": "*",
            "Action":["s3:GetObject"],
            "Resource": [ 
              { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "DataBucket"},"/*"]]},
              { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "LoggingBucket"},"/*"]]},
              { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "cloudtrail"},"/*"]]}
            ]
            }
          ]
        },
        "RouteTableIds" : [ 
          {"Ref": "PublicRouteTable"},
          {"Ref": "PrivateRouteTable1"},
          {"Ref": "PrivateRouteTable2"}
         ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref": "MyVPC"}
      }
    },

    "DoDUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "LoginProfile": {
          "Password": {"Ref": "Password"}}
      }
    },
    "DoDUserGroup": {
      "Type": "AWS::IAM::Group"
    },
    "Users1": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "DoDUserGroup"
        },
        "Users": [
          {"Ref": "DoDUser"}
        ]
      }
    },
    "DoDUserPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "DoDUsers",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "DataBucket"}]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:DeleteObject"
              ],
              "Resource": [
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "DataBucket"},"/*"]]}
              ]
            }
          ]
        },
        "Groups": [
          {"Ref": "DoDUserGroup"}
        ]
      }
    },
    "DoDKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref": "DoDUser"}
      }
    },
    "Admin1User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "LoginProfile": {
          "Password": {"Ref": "Password"}
        }
      }
    },
    "Admin1UserGroup": {
      "Type": "AWS::IAM::Group"
    },
    "Users2": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {"Ref": "Admin1UserGroup"},
        "Users": [
          {"Ref": "Admin1User"}
        ]
      }
    },
    "Admin1UserPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "Admin1Users",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": [ 
                { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "DataBucket"}]]},
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "LoggingBucket"}]]},
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "cloudtrail"}]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:DeleteObject"
              ],
              "Resource": [
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "DataBucket"},"/*"]]},
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "LoggingBucket"},"/*"]]},
                {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "cloudtrail"},"/*"]]}
              ]
            }
          ]
        },
        "Groups": [
          {"Ref": "Admin1UserGroup"}
        ]
      }
    },
    "Admin1Keys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref": "Admin1User"}
      }
    },
    "SecurityUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "LoginProfile": {
          "Password": {"Ref": "Password"}
        }
      }
    },
    "SecurityUserGroup": {
      "Type": "AWS::IAM::Group"
    },
    "Users3": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": { "Ref": "SecurityUserGroup" },
        "Users": [
          {"Ref": "SecurityUser"}
        ]
      }
    },
    "SecurityUserPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "SecurityUsers",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "cloudtrail"}]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:DeleteObject"
              ],
              "Resource": [
                { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "cloudtrail"},"/*"]]}
              ]
            }
          ]
        },
        "Groups": [{"Ref": "SecurityUserGroup"}]
      }
    },
    "SecurityKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "SecurityUser"
        }
      }
    },
    "MySplunkInstance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-cfe4b2b0",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "InstanceType": "t2.micro",
        "SecurityGroupIds": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Backup",
            "Value": "Yes"
          },
          {
            "Key": "Name",
            "Value": "SplunkInstance1"
          }
        ]
      }
    },
    "MySplunkInstance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-cfe4b2b0",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "InstanceType": "t2.micro",
        "SecurityGroupIds": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Backup",
            "Value": "Yes"
          },
          {
            "Key": "Name",
            "Value": "SplunkInstance2"
          }
        ]
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "lambda-execution-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": "logs:CreateLogGroup",
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:Describe*",
                        "ec2:CreateSnapshot",
                        "ec2:DeleteSnapshot",
                        "ec2:CreateTags",
                        "tag:AddResourceTags",
                        "tag:RemoveResourceTags",
                        "tag:TagResources",
                        "tag:UntagResources"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource":"*"
                  }
              ]
            }
          }
        ]
      }
    },
    "cleanupsnapshot": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
          "Code": {
              "S3Bucket":  { "Ref": "BucketForLambdaCode" },
              "S3Key": { "Ref": "CleanupSnapShotCode" }
          },
          "MemorySize": 128,
          "Handler": "lambda-cleanup-snapshot.lambda_handler",
          "Role": {"Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
          "Timeout": 3,
          "Runtime": "python2.7",
          "Description": "lambda-cleanup-snapshot"
      }
  },
  "createsnapshot": {  
    "Type": "AWS::Lambda::Function",
    "Properties": {
        "Code": {
            "S3Bucket":  { "Ref": "BucketForLambdaCode" },
            "S3Key": { "Ref": "CreateSnapShotCode" }
        },
        "MemorySize": 128,
        "Handler": "lambda-create-snapshot.lambda_handler",
        "Role": {"Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 3,
        "Runtime": "python2.7",
        "Description": "lambda-cleanup-snapshot"
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["cleanupsnapshot", "Arn"] },
          "Id": {"Ref":"cleanupsnapshot"}
        },
        {
          "Arn": { "Fn::GetAtt": ["createsnapshot", "Arn"] },
          "Id": {"Ref":"createsnapshot"}
        }
      ]
      }
    },
    "PermissionForEventsToInvokeLambda1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref":"cleanupsnapshot"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduledRule", "Arn"] }
      }
    },
    "PermissionForEventsToInvokeLambda2": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref":"createsnapshot"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduledRule", "Arn"] }
      }
    },
    "myDBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Frontend Access",
        "VpcId"            : {"Ref": "MyVPC"},
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort"   : 5432,
          "ToPort"     : 5432,
          "CidrIp"     : "10.0.0.0/16"
        }]
      }
    },
    "myDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
         "DBSubnetGroupDescription" : "DB Private Subnet",
         "SubnetIds" : [
           {"Ref": "PrivateSubnet1"},
           {"Ref": "PrivateSubnet2"}
          ]
      }
    },
    "pgDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBName" : { "Ref" : "DBName" },
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "DBInstanceClass" : { "Ref" : "DBClass" },
        "Engine" : "postgres",
        "EngineVersion":"10.3",
        "MasterUsername" : { "Ref" : "DBUsername" } ,
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "DBSubnetGroupName" : { "Ref" : "myDBSubnetGroup" },
        "VPCSecurityGroups" : [ { "Fn::GetAtt" : [ "myDBEC2SecurityGroup", "GroupId" ] } ]
      }
    }
  },
  "Outputs": {
    "MyVPC": {
      "Description": "A reference to the created VPC",
      "Value": {"Ref": "MyVPC"}
    },
    "PublicSubnets": {
      "Description": "A list of the public subnets",
      "Value": {"Fn::Join": [", ",[{"Ref": "PublicSubnet1"},{"Ref": "PublicSubnet2"}]]}},
    "PrivateSubnets": {
      "Description": "A list of the private subnets",
      "Value": {"Fn::Join": [", ",[{"Ref": "PrivateSubnet1"},{"Ref": "PrivateSubnet2"}]]}
    },
    "InstanceSecurityGroup": {
      "Description": "Allow HTTP and SSH traffic Host attached",
      "Value": {"Ref": "InstanceSecurityGroup"}
    },
    "DataBucketName": {
      "Value": {"Ref": "DataBucket"},
      "Description": "Name of the sample Amazon S3 bucket with a logging configuration.\n Enable with Default AES256"
    },
    "LoggingBucketName": {
      "Value": {"Ref": "LoggingBucket"},
      "Description": "Name of the sample Amazon S3 bucket with a logging configuration.\n Enable with Default AES256"
    },
    "DoDAccessKey": {
      "Value": {"Ref": "DoDKeys"},
      "Description": "AWSAccessKeyId of new user"
    },
    "DoDSecretKey": {
      "Value": {"Fn::GetAtt": ["DoDKeys","SecretAccessKey"]},
      "Description": "AWSSecretKey of new user"
    },
    "Admin1AccessKey": {
      "Value": {"Ref": "Admin1Keys"},
      "Description": "AWSAccessKeyId of new user"
    },
    "Admin1SecretKey": {
      "Value": {"Fn::GetAtt": ["Admin1Keys","SecretAccessKey"]},
      "Description": "AWSSecretKey of new user"
    },
    "SecurityAccessKey": {
      "Value": {"Ref": "SecurityKeys"},
      "Description": "AWSAccessKeyId of new user"
    },
    "SecuritySecretKey": {
      "Value": {"Fn::GetAtt": ["SecurityKeys","SecretAccessKey"]},
      "Description": "AWSSecretKey of new user"
    },
    "CleanupSnapshot": {
      "Value": {"Ref": "cleanupsnapshot"},
      "Description": "cleanup-snapshot"
    },
    "CreateSnapshot": {
      "Value": { "Ref": "cleanupsnapshot"},
      "Description": "create-snapshot"
    }
  }
}